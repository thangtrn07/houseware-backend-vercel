{"version":3,"sources":["../src/server.ts"],"sourcesContent":["import 'reflect-metadata';\r\nimport 'express-async-errors';\r\nimport express, { Application } from 'express';\r\nimport morgan from 'morgan';\r\nimport cors from 'cors';\r\nimport helmet from 'helmet';\r\nimport compression from 'compression';\r\nimport cookieParser from 'cookie-parser';\r\nimport session from 'express-session';\r\nimport connectMongoSession from 'connect-mongodb-session';\r\n\r\nimport passport from 'passport';\r\n\r\nimport { LOG_FORMAT, MONGOOSE_URI, NODE_ENV, ORIGIN, PORT, SESSION_KEY } from '~/config';\r\nimport connectMongodb from '~/config/db';\r\nimport controllerRegister from '~/utils/controllerRegister';\r\nimport { handleError } from '~/middlewares/handleError';\r\n\r\nimport UserController from '~/controllers/user.controller';\r\nimport AuthController from '~/controllers/auth.controller';\r\nimport ProductController from '~/controllers/product.controller';\r\nimport CategoryController from '~/controllers/category.controller';\r\nimport OrderController from '~/controllers/order.controller';\r\nimport UploadController from '~/controllers/upload.controller';\r\nimport HomeController from '~/controllers/home.controller';\r\nimport handlerLocalPassport from '~/passport/handlerLocalPassport';\r\n\r\nclass App {\r\n   protected app: Application;\r\n   protected env: string;\r\n   protected port: string | number;\r\n   protected MongoDBStore = connectMongoSession(session);\r\n\r\n   constructor() {\r\n      this.app = express();\r\n      this.env = NODE_ENV || 'development';\r\n      this.port = PORT || 5000;\r\n\r\n      this.connection();\r\n      this.initializeMiddlewares();\r\n      this.initializeRoutes();\r\n      this.initializeSwagger();\r\n      this.initializeErrorHandling();\r\n   }\r\n\r\n   private connection = async () => {\r\n      await connectMongodb();\r\n   };\r\n\r\n   private initializeMiddlewares = () => {\r\n      this.app.use(morgan(LOG_FORMAT));\r\n      this.app.use(cors({ origin: ORIGIN, credentials: true }));\r\n      this.app.use(express.json());\r\n      this.app.use(express.urlencoded({ extended: true }));\r\n      this.app.use(cookieParser());\r\n      this.app.use(helmet());\r\n      this.app.use(compression());\r\n      this.app.set(\"trust proxy\", 1);\r\n\r\n      const store = new this.MongoDBStore({\r\n         uri: MONGOOSE_URI,\r\n         collection: 'session'\r\n      });\r\n\r\n      this.app.use(\r\n         session({\r\n            store: store,\r\n            secret: SESSION_KEY,\r\n            resave: false,\r\n            saveUninitialized: false,\r\n            proxy: true, \r\n            cookie: {\r\n               secure: true,\r\n               httpOnly: true,\r\n               maxAge: 1000 * 60 * 60 * 24 * 7,\r\n               sameSite: 'none',\r\n             },\r\n         })\r\n      );\r\n\r\n      this.app.use(passport.initialize());\r\n      this.app.use(passport.session());\r\n\r\n      handlerLocalPassport(this.app);\r\n   };\r\n\r\n   private initializeRoutes = () => {\r\n      controllerRegister(this.app, [\r\n         AuthController,\r\n         UserController,\r\n         CategoryController,\r\n         ProductController,\r\n         OrderController,\r\n         UploadController,\r\n         HomeController\r\n      ]);\r\n   };\r\n\r\n   private initializeSwagger = () => {};\r\n\r\n   private initializeErrorHandling = () => {\r\n      this.app.use(handleError.NotFound);\r\n      this.app.use(handleError.InternalServer);\r\n   };\r\n\r\n   public listen = () => {\r\n      this.app.listen(this.port, () => {\r\n         console.log(`=================================`);\r\n         console.log(`======= ENV: ${this.env} =======`);\r\n         console.log(`ðŸš€ App listening on the port ${this.port}`);\r\n         console.log(`=================================`);\r\n      });\r\n   };\r\n}\r\n\r\nconst app = new App();\r\n\r\napp.listen();\r\n"],"names":["App","constructor","app","env","port","MongoDBStore","connectMongoSession","session","connection","connectMongodb","initializeMiddlewares","use","morgan","LOG_FORMAT","cors","origin","ORIGIN","credentials","express","json","urlencoded","extended","cookieParser","helmet","compression","set","store","uri","MONGOOSE_URI","collection","secret","SESSION_KEY","resave","saveUninitialized","proxy","cookie","secure","httpOnly","maxAge","sameSite","passport","initialize","handlerLocalPassport","initializeRoutes","controllerRegister","AuthController","UserController","CategoryController","ProductController","OrderController","UploadController","HomeController","initializeSwagger","initializeErrorHandling","handleError","NotFound","InternalServer","listen","console","log","NODE_ENV","PORT"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}