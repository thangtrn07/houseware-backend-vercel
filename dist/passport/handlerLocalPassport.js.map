{"version":3,"sources":["../../src/passport/handlerLocalPassport.ts"],"sourcesContent":["import { Application } from 'express';\r\nimport passport from 'passport';\r\n\r\nimport passportLocal from 'passport-local';\r\nimport Account from '~/models/account.model';\r\nimport User from '~/models/user.model';\r\nimport { BadRequestException, UnauthorizedException } from '~/utils/response';\r\nconst LocalStrategy = passportLocal.Strategy;\r\n\r\nconst handlerLocalPassport = (app: Application) => {\r\n   passport.use(\r\n      new LocalStrategy(async (username, password, done) => {\r\n         const account = (await Account.findOne({ username }))?.toJSON();\r\n         if (!account) {\r\n            return done(new UnauthorizedException('Username or password is incorrect'));\r\n         }\r\n\r\n         const storedPassword = account.password;\r\n\r\n         if (storedPassword !== password) {\r\n            return done(new UnauthorizedException('Username or password is incorrect'));\r\n         } else {\r\n            const user = await User.findOne({ account: account?._id })?.populate({\r\n               path: 'account',\r\n               select: { password: 0 }\r\n            });\r\n            return done(null, user as any);\r\n         }\r\n      })\r\n   );\r\n\r\n   passport.serializeUser(function (user, done) {\r\n      done(null, (user?.account?._id).toString());\r\n   });\r\n\r\n   passport.deserializeUser(async function (_id, done) {\r\n      try {\r\n         const user = (\r\n            await User.findOne({ account: _id })?.populate({\r\n               path: 'account',\r\n               select: { password: 0 }\r\n            })\r\n         )?.toJSON();\r\n\r\n         if (!user) {\r\n            done(new UnauthorizedException('Your session is invalid session'));\r\n         } else {\r\n            done(null, user as any);\r\n         }\r\n      } catch (error) {\r\n         throw new BadRequestException(error?.message);\r\n      }\r\n   });\r\n};\r\n\r\nexport default handlerLocalPassport;\r\n"],"names":["LocalStrategy","passportLocal","Strategy","handlerLocalPassport","app","passport","use","username","password","done","account","Account","findOne","toJSON","UnauthorizedException","storedPassword","User","user","_id","populate","path","select","serializeUser","toString","deserializeUser","error","BadRequestException","message"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;+BAuDA;;;eAAA;;;mDAtDqB;wDAEK;uDACN;oDACH;0BAC0C;;;;;;AAC3D,MAAMA,gBAAgBC,sBAAa,CAACC,QAAQ;AAE5C,MAAMC,uBAAuB,CAACC;IAC3BC,iBAAQ,CAACC,GAAG,CACT,IAAIN,cAAc,OAAOO,UAAUC,UAAUC;YACzB;QAAjB,MAAMC,WAAW,QAAA,MAAMC,qBAAO,CAACC,OAAO,CAAC;YAAEL;QAAS,gBAAjC,4BAAD,AAAC,MAAsCM,MAAM;QAC7D,IAAI,CAACH,SAAS;YACX,OAAOD,KAAK,IAAIK,+BAAqB,CAAC;QACzC;QAEA,MAAMC,iBAAiBL,QAAQF,QAAQ;QAEvC,IAAIO,mBAAmBP,UAAU;YAC9B,OAAOC,KAAK,IAAIK,+BAAqB,CAAC;QACzC,OAAO;gBACeE;YAAnB,MAAMC,OAAO,QAAMD,gBAAAA,kBAAI,CAACJ,OAAO,CAAC;gBAAEF,OAAO,EAAEA,oBAAAA,8BAAAA,QAASQ,GAAG;YAAC,gBAArCF,oCAAAA,cAAyCG,QAAQ,CAAC;gBAClEC,MAAM;gBACNC,QAAQ;oBAAEb,UAAU;gBAAE;YACzB;YACA,OAAOC,KAAK,MAAMQ;QACrB;IACH;IAGHZ,iBAAQ,CAACiB,aAAa,CAAC,SAAUL,IAAI,EAAER,IAAI;YAC5BQ;QAAZR,KAAK,MAAM,CAACQ,iBAAAA,4BAAAA,gBAAAA,KAAMP,OAAO,cAAbO,oCAAAA,cAAeC,GAAG,EAAEK,QAAQ;IAC3C;IAEAlB,iBAAQ,CAACmB,eAAe,CAAC,eAAgBN,GAAG,EAAET,IAAI;QAC/C,IAAI;gBAEE,OAAMO;YADT,MAAMC,QACH,QAAA,QAAMD,gBAAAA,kBAAI,CAACJ,OAAO,CAAC;gBAAEF,SAASQ;YAAI,gBAA5BF,oCAAAA,cAAgCG,QAAQ,CAAC;gBAC5CC,MAAM;gBACNC,QAAQ;oBAAEb,UAAU;gBAAE;YACzB,iBAHA,4BADU,AACV,MAIAK,MAAM;YAET,IAAI,CAACI,MAAM;gBACRR,KAAK,IAAIK,+BAAqB,CAAC;YAClC,OAAO;gBACJL,KAAK,MAAMQ;YACd;QACH,EAAE,OAAOQ,OAAO;YACb,MAAM,IAAIC,6BAAmB,CAACD,kBAAAA,4BAAAA,MAAOE,OAAO;QAC/C;IACH;AACH;MAEA,WAAexB"}